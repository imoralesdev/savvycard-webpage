/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e={"./javascript/classes/Component.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/events/events.js"),i=s.n(n);class r extends(i()){constructor({element:e,elements:t}){super(),this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},Object.keys(this.selectorChildren).forEach((e=>{const t=this.selectorChildren[e];t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))}))}addEventListeners(){}removeEventListeners(){}}},"./javascript/classes/Page.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});class n{constructor({element:e,elements:t,id:s}){this.selector=e,this.selectorChildren={...t},this.id=s}create(){this.element=document.querySelector(this.selector),this.elements={},Object.keys(this.selectorChildren).forEach((e=>{const t=this.selectorChildren[e];t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))}))}}},"./javascript/components/Navigation.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var n=s("./javascript/classes/Component.js");class i extends n.default{constructor({template:e}){super({element:".navigation",elements:{links:".navigation__item",navMobile:".nav-mobile",navMobileMenu:".nav-mobile-menu"}})}toggleNavMobileActive(){document.body.classList.toggle("overflow-hidden"),this.elements.navMobile.classList.toggle("nav-mobile--active"),this.elements.navMobileMenu.classList.toggle("nav-mobile-menu--active")}addEventListeners(){this.onClickNavMobile=this.toggleNavMobileActive.bind(this),this.elements.navMobile.addEventListener("click",this.onClickNavMobile)}}},"./javascript/components/Quote.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var n=s("./javascript/classes/Component.js");class i extends n.default{constructor(){super({element:".quote-slider",elements:{quotes:".quote-slider__list",quotesSlideLeft:"#quote_slider_left",quotesSlideRight:"#quote_slider_right",quotesCountNumber:".quote-slider__active"}}),this.slides=[],this.slide=0,this.slidesCarousel()}slidesCarousel(){let e=this;this.slides=this.elements.quotes.childNodes,setInterval((function(){e.slides[e.slide].classList.remove("quote-slider__slide-active"),e.slide++,e.elements.quotesCountNumber.innerHTML=e.slide+1,e.slide>=e.slides.length&&(e.slide=0,e.elements.quotesCountNumber.innerHTML=1),e.slides[e.slide].classList.add("quote-slider__slide-active")}),5e3)}slidesMovement(e){switch(this.slides[this.slide].classList.remove("quote-slider__slide-active"),e.target.dataset.movement){case"left":0===this.slide?(this.elements.quotesCountNumber.innerHTML=this.slides.length,this.slide=this.slides.length-1,this.slides[this.slide].classList.add("quote-slider__slide-active")):(this.elements.quotesCountNumber.innerHTML=this.slide,this.slide=this.slide-1,this.slides[this.slide].classList.add("quote-slider__slide-active"));break;case"right":this.slide=this.slide+1,this.elements.quotesCountNumber.innerHTML=this.slide+1,this.slide>=this.slides.length&&(this.elements.quotesCountNumber.innerHTML=1,this.slide=0),this.slides[this.slide].classList.add("quote-slider__slide-active");break;default:return null}}addEventListeners(){this.onClickSlidesArrow=this.slidesMovement.bind(this),this.elements.quotesSlideLeft.addEventListener("click",this.onClickSlidesArrow),this.elements.quotesSlideRight.addEventListener("click",this.onClickSlidesArrow)}}},"./javascript/pages/Business/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var n=s("./javascript/classes/Page.js");class i extends n.default{constructor(){super({id:"home",element:".home",elements:{homeBtn:"#home_btn"}})}create(){super.create(),console.log("Business Page")}}},"./javascript/pages/Enterprise/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var n=s("./javascript/classes/Page.js");class i extends n.default{constructor(){super({id:"home",element:".home",elements:{homeBtn:"#home_btn"}})}create(){super.create(),console.log("Enterprise Page")}}},"./javascript/pages/Home/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var n=s("./javascript/classes/Page.js"),i=s("./javascript/components/Quote.js");class r extends n.default{constructor(){super({id:"home",element:".home",elements:{homeBtn:"#home_btn"}})}create(){super.create(),this.createQuote()}createQuote(){this.quote=new i.default}}},"./javascript/pages/RealEstate/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var n=s("./javascript/classes/Page.js");class i extends n.default{constructor(){super({id:"home",element:".home",elements:{homeBtn:"#home_btn"}})}create(){super.create(),console.log("Real Estate Page")}}},"./node_modules/events/events.js":e=>{var t,s="object"==typeof Reflect?Reflect:null,n=s&&"function"==typeof s.apply?s.apply:function(e,t,s){return Function.prototype.apply.call(e,t,s)};t=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function r(){r.init.call(this)}e.exports=r,e.exports.once=function(e,t){return new Promise((function(s,n){function i(s){e.removeListener(t,r),n(s)}function r(){"function"==typeof e.removeListener&&e.removeListener("error",i),s([].slice.call(arguments))}m(e,t,r,{once:!0}),"error"!==t&&function(e,t,s){"function"==typeof e.on&&m(e,"error",t,s)}(e,i,{once:!0})}))},r.EventEmitter=r,r.prototype._events=void 0,r.prototype._eventsCount=0,r.prototype._maxListeners=void 0;var o=10;function l(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function a(e){return void 0===e._maxListeners?r.defaultMaxListeners:e._maxListeners}function c(e,t,s,n){var i,r,o,c;if(l(s),void 0===(r=e._events)?(r=e._events=Object.create(null),e._eventsCount=0):(void 0!==r.newListener&&(e.emit("newListener",t,s.listener?s.listener:s),r=e._events),o=r[t]),void 0===o)o=r[t]=s,++e._eventsCount;else if("function"==typeof o?o=r[t]=n?[s,o]:[o,s]:n?o.unshift(s):o.push(s),(i=a(e))>0&&o.length>i&&!o.warned){o.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=o.length,c=u,console&&console.warn&&console.warn(c)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,s){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:s},i=u.bind(n);return i.listener=s,n.wrapFn=i,i}function h(e,t,s){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?s?[i.listener||i]:[i]:s?function(e){for(var t=new Array(e.length),s=0;s<t.length;++s)t[s]=e[s].listener||e[s];return t}(i):p(i,i.length)}function v(e){var t=this._events;if(void 0!==t){var s=t[e];if("function"==typeof s)return 1;if(void 0!==s)return s.length}return 0}function p(e,t){for(var s=new Array(t),n=0;n<t;++n)s[n]=e[n];return s}function m(e,t,s,n){if("function"==typeof e.on)n.once?e.once(t,s):e.on(t,s);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(r){n.once&&e.removeEventListener(t,i),s(r)}))}}Object.defineProperty(r,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),r.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},r.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},r.prototype.getMaxListeners=function(){return a(this)},r.prototype.emit=function(e){for(var t=[],s=1;s<arguments.length;s++)t.push(arguments[s]);var i="error"===e,r=this._events;if(void 0!==r)i=i&&void 0===r.error;else if(!i)return!1;if(i){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var l=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw l.context=o,l}var a=r[e];if(void 0===a)return!1;if("function"==typeof a)n(a,this,t);else{var c=a.length,u=p(a,c);for(s=0;s<c;++s)n(u[s],this,t)}return!0},r.prototype.addListener=function(e,t){return c(this,e,t,!1)},r.prototype.on=r.prototype.addListener,r.prototype.prependListener=function(e,t){return c(this,e,t,!0)},r.prototype.once=function(e,t){return l(t),this.on(e,d(this,e,t)),this},r.prototype.prependOnceListener=function(e,t){return l(t),this.prependListener(e,d(this,e,t)),this},r.prototype.removeListener=function(e,t){var s,n,i,r,o;if(l(t),void 0===(n=this._events))return this;if(void 0===(s=n[e]))return this;if(s===t||s.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,s.listener||t));else if("function"!=typeof s){for(i=-1,r=s.length-1;r>=0;r--)if(s[r]===t||s[r].listener===t){o=s[r].listener,i=r;break}if(i<0)return this;0===i?s.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(s,i),1===s.length&&(n[e]=s[0]),void 0!==n.removeListener&&this.emit("removeListener",e,o||t)}return this},r.prototype.off=r.prototype.removeListener,r.prototype.removeAllListeners=function(e){var t,s,n;if(void 0===(s=this._events))return this;if(void 0===s.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==s[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete s[e]),this;if(0===arguments.length){var i,r=Object.keys(s);for(n=0;n<r.length;++n)"removeListener"!==(i=r[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=s[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},r.prototype.listeners=function(e){return h(this,e,!0)},r.prototype.rawListeners=function(e){return h(this,e,!1)},r.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):v.call(e,t)},r.prototype.listenerCount=v,r.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}}},t={};function s(n){var i=t[n];if(void 0!==i)return i.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,s),r.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{s.r({});var e=s("./javascript/pages/Home/index.js"),t=s("./javascript/pages/RealEstate/index.js"),n=s("./javascript/pages/Business/index.js"),i=s("./javascript/pages/Enterprise/index.js"),r=s("./javascript/components/Navigation.js");new class{constructor(){this.createContent(),this.createPages(),this.addRouterListeners(),this.createNavigation(),window.onpopstate=()=>{const{href:e}=window.location;this.onChange(e)}}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createNavigation(){this.navigation=new r.default({template:this.template})}createPages(){this.pages={home:new e.default,real_estate:new t.default,business:new n.default,enterprise:new i.default},this.page=this.pages[this.template],this.page.create()}async onChange(e){const t=await window.fetch(e);if(200===t.status){const e=await t.text(),s=document.createElement("div");s.innerHTML=e;const n=s.querySelector(".content");this.template=n.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.content.innerHTML=n.innerHTML,this.page=this.pages[this.template],this.page.create(),this.addRouterListeners()}else{const e=new Error("Error on fetch");console.log(e)}}onNavigate(e){window.history.pushState({},e,window.location.origin+e)}addRouterListeners(){const e=document.querySelectorAll("a");Object.keys(e).forEach((t=>{const s=e[t];s.onclick=e=>{e.preventDefault();const{href:t,pathname:n}=s;this.onNavigate(n),this.onChange(t)}}))}}})(),s.r(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,