/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e={"./javascript/classes/Component.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/events/events.js"),s=n.n(r);class i extends(s()){constructor({element:e,elements:t}){super(),this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},Object.keys(this.selectorChildren).forEach((e=>{const t=this.selectorChildren[e];t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))}))}addEventListeners(){}removeEventListeners(){}}},"./javascript/classes/Page.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});class r{constructor({element:e,elements:t,id:n}){this.selector=e,this.selectorChildren={...t},this.id=n}create(){this.element=document.querySelector(this.selector),this.elements={},Object.keys(this.selectorChildren).forEach((e=>{const t=this.selectorChildren[e];t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))}))}}},"./javascript/components/Navigation.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var r=n("./javascript/classes/Component.js");class s extends r.default{constructor({template:e}){super({element:".navigation",elements:{links:".navigation__item"}})}}},"./javascript/pages/About/index.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var r=n("./javascript/classes/Page.js");class s extends r.default{constructor(){super({id:"about",element:".about",elements:{aboutBtn:"#about_btn"}})}create(){super.create(),console.log("About Class")}}},"./javascript/pages/Home/index.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var r=n("./javascript/classes/Page.js");class s extends r.default{constructor(){super({id:"home",element:".home",elements:{homeBtn:"#home_btn"}})}create(){super.create(),console.log("Home Class")}}},"./node_modules/events/events.js":e=>{var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(n,r){function s(n){e.removeListener(t,i),r(n)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",s),n([].slice.call(arguments))}d(e,t,i,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&d(e,"error",t,n)}(e,s,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var s,i,o,c;if(a(n),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),o=i[t]),void 0===o)o=i[t]=n,++e._eventsCount;else if("function"==typeof o?o=i[t]=r?[n,o]:[o,n]:r?o.unshift(n):o.push(n),(s=l(e))>0&&o.length>s&&!o.warned){o.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=o.length,c=u,console&&console.warn&&console.warn(c)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},s=u.bind(r);return s.listener=n,r.wrapFn=s,s}function f(e,t,n){var r=e._events;if(void 0===r)return[];var s=r[t];return void 0===s?[]:"function"==typeof s?n?[s.listener||s]:[s]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(s):v(s,s.length)}function p(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function v(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function d(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function s(i){r.once&&e.removeEventListener(t,s),n(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var s="error"===e,i=this._events;if(void 0!==i)s=s&&void 0===i.error;else if(!s)return!1;if(s){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)r(l,this,t);else{var c=l.length,u=v(l,c);for(n=0;n<c;++n)r(u[n],this,t)}return!0},i.prototype.addListener=function(e,t){return c(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return c(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,h(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,h(this,e,t)),this},i.prototype.removeListener=function(e,t){var n,r,s,i,o;if(a(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(s=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){o=n[i].listener,s=i;break}if(s<0)return this;0===s?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,s),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,o||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var s,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(s=i[r])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},i.prototype.listeners=function(e){return f(this,e,!0)},i.prototype.rawListeners=function(e){return f(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{n.r({});var e=n("./javascript/pages/Home/index.js"),t=n("./javascript/pages/About/index.js"),r=n("./javascript/components/Navigation.js");new class{constructor(){this.createContent(),this.createPages(),this.addRouterListeners()}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createNavigation(){this.navigation=new r.default({template:this.template})}createPages(){this.pages={home:new e.default,about:new t.default},this.page=this.pages[this.template],this.page.create()}async onChange(e){const t=await window.fetch(e);if(200===t.status){const e=await t.text(),n=document.createElement("div");n.innerHTML=e;const r=n.querySelector(".content");this.template=r.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.content.innerHTML=r.innerHTML,this.page=this.pages[this.template],window.location.pathname=`/${this.template}`,this.page.create(),this.addRouterListeners()}else{const e=new Error("Error on fetch");console.log(e)}}addRouterListeners(){const e=document.querySelectorAll("a");Object.keys(e).forEach((t=>{const n=e[t];n.onclick=e=>{e.preventDefault();const{href:t}=n;this.onChange(t)}}))}}})(),n.r(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxLQUFLYyxHQUFPYixTQUFTQyxJQUMxQixNQUFNaUwsRUFBT3JLLEVBQU1aLEdBRW5CaUwsRUFBS0MsUUFBV0MsSUFDZEEsRUFBTUMsaUJBQ04sTUFBTSxLQUFFQyxHQUFTSixFQUNqQjdMLEtBQUtrTSxTQUFTRCIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YW5kYWxvbmUtYm9pbGVycGxhdGUvLi9qYXZhc2NyaXB0L2NsYXNzZXMvQ29tcG9uZW50LmpzIiwid2VicGFjazovL3N0YW5kYWxvbmUtYm9pbGVycGxhdGUvLi9qYXZhc2NyaXB0L2NsYXNzZXMvUGFnZS5qcyIsIndlYnBhY2s6Ly9zdGFuZGFsb25lLWJvaWxlcnBsYXRlLy4vamF2YXNjcmlwdC9jb21wb25lbnRzL05hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vc3RhbmRhbG9uZS1ib2lsZXJwbGF0ZS8uL2phdmFzY3JpcHQvcGFnZXMvQWJvdXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3RhbmRhbG9uZS1ib2lsZXJwbGF0ZS8uL2phdmFzY3JpcHQvcGFnZXMvSG9tZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdGFuZGFsb25lLWJvaWxlcnBsYXRlLy4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vc3RhbmRhbG9uZS1ib2lsZXJwbGF0ZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zdGFuZGFsb25lLWJvaWxlcnBsYXRlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3N0YW5kYWxvbmUtYm9pbGVycGxhdGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3N0YW5kYWxvbmUtYm9pbGVycGxhdGUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9zdGFuZGFsb25lLWJvaWxlcnBsYXRlL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vc3RhbmRhbG9uZS1ib2lsZXJwbGF0ZS8uL2phdmFzY3JpcHQvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwiZXZlbnRzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZWxlbWVudHMgfSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zZWxlY3RvciA9IGVsZW1lbnQ7XG4gICAgdGhpcy5zZWxlY3RvckNoaWxkcmVuID0ge1xuICAgICAgLi4uZWxlbWVudHNcbiAgICB9O1xuICAgIHRoaXMuY3JlYXRlKCk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdG9yIGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50KSB7XG4gICAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLnNlbGVjdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudHMgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKHRoaXMuc2VsZWN0b3JDaGlsZHJlbikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBjb25zdCBlbnRyeSA9IHRoaXMuc2VsZWN0b3JDaGlsZHJlbltrZXldO1xuXG4gICAgICBpZiAoXG4gICAgICAgIGVudHJ5IGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50IHx8XG4gICAgICAgIGVudHJ5IGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0IHx8XG4gICAgICAgIEFycmF5LmlzQXJyYXkoZW50cnkpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gZW50cnk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVudHJ5KTtcblxuICAgICAgICBpZiAodGhpcy5lbGVtZW50c1trZXldLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5lbGVtZW50c1trZXldLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZW50cnkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVycygpIHt9XG5cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7fVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnZSB7XG4gIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZWxlbWVudHMsIGlkIH0pIHtcbiAgICB0aGlzLnNlbGVjdG9yID0gZWxlbWVudDtcbiAgICB0aGlzLnNlbGVjdG9yQ2hpbGRyZW4gPSB7XG4gICAgICAuLi5lbGVtZW50c1xuICAgIH07XG4gICAgdGhpcy5pZCA9IGlkO1xuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZWxlY3Rvcik7XG4gICAgdGhpcy5lbGVtZW50cyA9IHt9O1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5zZWxlY3RvckNoaWxkcmVuKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5zZWxlY3RvckNoaWxkcmVuW2tleV07XG5cbiAgICAgIGlmIChcbiAgICAgICAgZW50cnkgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQgfHxcbiAgICAgICAgZW50cnkgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZUxpc3QgfHxcbiAgICAgICAgQXJyYXkuaXNBcnJheShlbnRyeSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBlbnRyeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZW50cnkpO1xuXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbnRyeSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiY2xhc3Nlcy9Db21wb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmF2aWdhdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHsgdGVtcGxhdGUgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnQ6IFwiLm5hdmlnYXRpb25cIixcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIGxpbmtzOiBcIi5uYXZpZ2F0aW9uX19pdGVtXCJcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IFBhZ2UgZnJvbSBcImNsYXNzZXMvUGFnZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb21lIGV4dGVuZHMgUGFnZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHtcbiAgICAgIGlkOiBcImFib3V0XCIsXG4gICAgICBlbGVtZW50OiBcIi5hYm91dFwiLFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgYWJvdXRCdG46IFwiI2Fib3V0X2J0blwiXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGUoKSB7XG4gICAgc3VwZXIuY3JlYXRlKCk7XG4gICAgY29uc29sZS5sb2coXCJBYm91dCBDbGFzc1wiKTtcbiAgfVxufVxuIiwiaW1wb3J0IFBhZ2UgZnJvbSBcImNsYXNzZXMvUGFnZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb21lIGV4dGVuZHMgUGFnZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHtcbiAgICAgIGlkOiBcImhvbWVcIixcbiAgICAgIGVsZW1lbnQ6IFwiLmhvbWVcIixcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIGhvbWVCdG46IFwiI2hvbWVfYnRuXCJcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICBzdXBlci5jcmVhdGUoKTtcbiAgICBjb25zb2xlLmxvZyhcIkhvbWUgQ2xhc3NcIik7XG4gIH1cbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5tb2R1bGUuZXhwb3J0cy5vbmNlID0gb25jZTtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHNDb3VudCA9IDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbmZ1bmN0aW9uIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEVtaXR0ZXIsICdkZWZhdWx0TWF4TGlzdGVuZXJzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IE51bWJlcklzTmFOKGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArICcuJyk7XG4gICAgfVxuICAgIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBhcmc7XG4gIH1cbn0pO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLl9ldmVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgTnVtYmVySXNOYU4obikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgJy4nKTtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIF9nZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuIF9nZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XG4gICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFJlZmxlY3RBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB9IGVsc2UgaWYgKHByZXBlbmQpIHtcbiAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIG0gPSBfZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgIC8vIE5vIGVycm9yIGNvZGUgZm9yIHRoaXMgc2luY2UgaXQgaXMgYSBXYXJuaW5nXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyBTdHJpbmcodHlwZSkgKyAnIGxpc3RlbmVycyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY3JlYXNlIGxpbWl0Jyk7XG4gICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgIHcudHlwZSA9IHR5cGU7XG4gICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsIGFyZ3VtZW50cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XG4gIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7XG4gIHdyYXBwZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuZnVuY3Rpb24gX2xpc3RlbmVycyh0YXJnZXQsIHR5cGUsIHVud3JhcCkge1xuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcblxuICByZXR1cm4gdW53cmFwID9cbiAgICB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcikgOiBhcnJheUNsb25lKGV2bGlzdGVuZXIsIGV2bGlzdGVuZXIubGVuZ3RoKTtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0T3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKDsgaW5kZXggKyAxIDwgbGlzdC5sZW5ndGg7IGluZGV4KyspXG4gICAgbGlzdFtpbmRleF0gPSBsaXN0W2luZGV4ICsgMV07XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIG9uY2UoZW1pdHRlciwgbmFtZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIGVycm9yTGlzdGVuZXIoZXJyKSB7XG4gICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKG5hbWUsIHJlc29sdmVyKTtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc29sdmVyKCkge1xuICAgICAgaWYgKHR5cGVvZiBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgZXJyb3JMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgfTtcblxuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCByZXNvbHZlciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIGlmIChuYW1lICE9PSAnZXJyb3InKSB7XG4gICAgICBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBlcnJvckxpc3RlbmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgaGFuZGxlciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsICdlcnJvcicsIGhhbmRsZXIsIGZsYWdzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgbGlzdGVuZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChmbGFncy5vbmNlKSB7XG4gICAgICBlbWl0dGVyLm9uY2UobmFtZSwgbGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbWl0dGVyLm9uKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIEV2ZW50VGFyZ2V0IGRvZXMgbm90IGhhdmUgYGVycm9yYCBldmVudCBzZW1hbnRpY3MgbGlrZSBOb2RlXG4gICAgLy8gRXZlbnRFbWl0dGVycywgd2UgZG8gbm90IGxpc3RlbiBmb3IgYGVycm9yYCBldmVudHMgaGVyZS5cbiAgICBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZnVuY3Rpb24gd3JhcExpc3RlbmVyKGFyZykge1xuICAgICAgLy8gSUUgZG9lcyBub3QgaGF2ZSBidWlsdGluIGB7IG9uY2U6IHRydWUgfWAgc3VwcG9ydCBzbyB3ZVxuICAgICAgLy8gaGF2ZSB0byBkbyBpdCBtYW51YWxseS5cbiAgICAgIGlmIChmbGFncy5vbmNlKSB7XG4gICAgICAgIGVtaXR0ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCB3cmFwTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgbGlzdGVuZXIoYXJnKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJlbWl0dGVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEV2ZW50RW1pdHRlci4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGVtaXR0ZXIpO1xuICB9XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IEhvbWUgZnJvbSBcIi4vcGFnZXMvSG9tZVwiO1xuaW1wb3J0IEFib3V0IGZyb20gXCIuL3BhZ2VzL0Fib3V0XCI7XG5pbXBvcnQgTmF2aWdhdGlvbiBmcm9tIFwiLi9jb21wb25lbnRzL05hdmlnYXRpb25cIjtcblxuY2xhc3MgQXBwIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jcmVhdGVDb250ZW50KCk7XG4gICAgdGhpcy5jcmVhdGVQYWdlcygpO1xuICAgIHRoaXMuYWRkUm91dGVyTGlzdGVuZXJzKCk7XG4gIH1cblxuICBjcmVhdGVDb250ZW50KCkge1xuICAgIHRoaXMuY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGVudFwiKTtcbiAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy5jb250ZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdGVtcGxhdGVcIik7XG4gIH1cblxuICBjcmVhdGVOYXZpZ2F0aW9uKCkge1xuICAgIHRoaXMubmF2aWdhdGlvbiA9IG5ldyBOYXZpZ2F0aW9uKHtcbiAgICAgIHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlXG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVQYWdlcygpIHtcbiAgICB0aGlzLnBhZ2VzID0ge1xuICAgICAgaG9tZTogbmV3IEhvbWUoKSxcbiAgICAgIGFib3V0OiBuZXcgQWJvdXQoKVxuICAgIH07XG5cbiAgICB0aGlzLnBhZ2UgPSB0aGlzLnBhZ2VzW3RoaXMudGVtcGxhdGVdO1xuICAgIHRoaXMucGFnZS5jcmVhdGUoKTtcbiAgfVxuXG4gIC8vIE1pbWljIFJlYWN0IFJvdXRlclxuICBhc3luYyBvbkNoYW5nZSh1cmwpIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgd2luZG93LmZldGNoKHVybCk7XG5cbiAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlcXVlc3QudGV4dCgpO1xuICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgZGl2LmlubmVySFRNTCA9IGh0bWw7XG5cbiAgICAgIGNvbnN0IGRpdkNvbnRlbnQgPSBkaXYucXVlcnlTZWxlY3RvcihcIi5jb250ZW50XCIpO1xuICAgICAgdGhpcy50ZW1wbGF0ZSA9IGRpdkNvbnRlbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10ZW1wbGF0ZVwiKTtcblxuICAgICAgdGhpcy5jb250ZW50LnNldEF0dHJpYnV0ZShcImRhdGEtdGVtcGxhdGVcIiwgdGhpcy50ZW1wbGF0ZSk7XG4gICAgICB0aGlzLmNvbnRlbnQuaW5uZXJIVE1MID0gZGl2Q29udGVudC5pbm5lckhUTUw7XG5cbiAgICAgIHRoaXMucGFnZSA9IHRoaXMucGFnZXNbdGhpcy50ZW1wbGF0ZV07XG4gICAgICB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgPSBgLyR7dGhpcy50ZW1wbGF0ZX1gO1xuICAgICAgdGhpcy5wYWdlLmNyZWF0ZSgpO1xuICAgICAgdGhpcy5hZGRSb3V0ZXJMaXN0ZW5lcnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwiRXJyb3Igb24gZmV0Y2hcIik7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH1cbiAgfVxuXG4gIGFkZFJvdXRlckxpc3RlbmVycygpIHtcbiAgICBjb25zdCBsaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJhXCIpO1xuXG4gICAgT2JqZWN0LmtleXMobGlua3MpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY29uc3QgbGluayA9IGxpbmtzW2tleV07XG5cbiAgICAgIGxpbmsub25jbGljayA9IChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCB7IGhyZWYgfSA9IGxpbms7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoaHJlZik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG5cbm5ldyBBcHAoKTtcbiJdLCJuYW1lcyI6WyJDb21wb25lbnQiLCJFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsImVsZW1lbnQiLCJlbGVtZW50cyIsInN1cGVyIiwidGhpcyIsInNlbGVjdG9yIiwic2VsZWN0b3JDaGlsZHJlbiIsImNyZWF0ZSIsImFkZEV2ZW50TGlzdGVuZXJzIiwid2luZG93IiwiSFRNTEVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImVudHJ5IiwiTm9kZUxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJQYWdlIiwiaWQiLCJOYXZpZ2F0aW9uIiwidGVtcGxhdGUiLCJsaW5rcyIsIkhvbWUiLCJhYm91dEJ0biIsImNvbnNvbGUiLCJsb2ciLCJob21lQnRuIiwiUmVmbGVjdE93bktleXMiLCJSIiwiUmVmbGVjdCIsIlJlZmxlY3RBcHBseSIsImFwcGx5IiwidGFyZ2V0IiwicmVjZWl2ZXIiLCJhcmdzIiwiRnVuY3Rpb24iLCJwcm90b3R5cGUiLCJjYWxsIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25jYXQiLCJOdW1iZXJJc05hTiIsIk51bWJlciIsImlzTmFOIiwidmFsdWUiLCJpbml0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm9uY2UiLCJlbWl0dGVyIiwibmFtZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3JMaXN0ZW5lciIsImVyciIsInJlbW92ZUxpc3RlbmVyIiwicmVzb2x2ZXIiLCJzbGljZSIsImFyZ3VtZW50cyIsImV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lciIsImhhbmRsZXIiLCJmbGFncyIsIm9uIiwiYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIiLCJfZXZlbnRzIiwidW5kZWZpbmVkIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJjaGVja0xpc3RlbmVyIiwibGlzdGVuZXIiLCJUeXBlRXJyb3IiLCJfZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsIl9hZGRMaXN0ZW5lciIsInR5cGUiLCJwcmVwZW5kIiwibSIsImV2ZW50cyIsImV4aXN0aW5nIiwid2FybmluZyIsIm5ld0xpc3RlbmVyIiwiZW1pdCIsInVuc2hpZnQiLCJwdXNoIiwid2FybmVkIiwidyIsIkVycm9yIiwiU3RyaW5nIiwiY291bnQiLCJ3YXJuIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsImJpbmQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsImFyciIsInJldCIsImkiLCJ1bndyYXBMaXN0ZW5lcnMiLCJhcnJheUNsb25lIiwibGlzdGVuZXJDb3VudCIsIm4iLCJjb3B5IiwiYWRkRXZlbnRMaXN0ZW5lciIsIndyYXBMaXN0ZW5lciIsImFyZyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJSYW5nZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXJyb3IiLCJlciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwibGVuIiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdCIsInBvc2l0aW9uIiwib3JpZ2luYWxMaXN0ZW5lciIsInNoaWZ0IiwiaW5kZXgiLCJwb3AiLCJzcGxpY2VPbmUiLCJvZmYiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJvIiwib2JqIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiY3JlYXRlQ29udGVudCIsImNyZWF0ZVBhZ2VzIiwiYWRkUm91dGVyTGlzdGVuZXJzIiwiY29udGVudCIsImdldEF0dHJpYnV0ZSIsImNyZWF0ZU5hdmlnYXRpb24iLCJuYXZpZ2F0aW9uIiwicGFnZXMiLCJob21lIiwiYWJvdXQiLCJBYm91dCIsInBhZ2UiLCJ1cmwiLCJyZXF1ZXN0IiwiZmV0Y2giLCJzdGF0dXMiLCJodG1sIiwidGV4dCIsImRpdiIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJkaXZDb250ZW50Iiwic2V0QXR0cmlidXRlIiwibG9jYXRpb24iLCJwYXRobmFtZSIsImxpbmsiLCJvbmNsaWNrIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImhyZWYiLCJvbkNoYW5nZSJdLCJzb3VyY2VSb290IjoiIn0=