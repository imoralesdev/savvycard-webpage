/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e={"./javascript/classes/Component.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var s=n("./node_modules/events/events.js"),i=n.n(s);class r extends(i()){constructor({element:e,elements:t}){super(),this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},Object.keys(this.selectorChildren).forEach((e=>{const t=this.selectorChildren[e];t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))}))}addEventListeners(){}removeEventListeners(){}}},"./javascript/classes/Page.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});class s{constructor({element:e,elements:t,id:n}){this.selector=e,this.selectorChildren={...t},this.id=n}create(){this.element=document.querySelector(this.selector),this.elements={},Object.keys(this.selectorChildren).forEach((e=>{const t=this.selectorChildren[e];t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))}))}}},"./javascript/components/Navigation.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var s=n("./javascript/classes/Component.js");class i extends s.default{constructor({template:e}){super({element:".navigation",elements:{links:".navigation__item",navMobile:".nav-mobile",navMobileMenu:".nav-mobile-menu"}})}toggleNavMobileActive(){document.body.classList.toggle("overflow-hidden"),this.elements.navMobile.classList.toggle("nav-mobile--active"),this.elements.navMobileMenu.classList.toggle("nav-mobile-menu--active")}addEventListeners(){this.onClickNavMobile=this.toggleNavMobileActive.bind(this),this.elements.navMobile.addEventListener("click",this.onClickNavMobile)}}},"./javascript/components/Quote.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var s=n("./javascript/classes/Component.js");class i extends s.default{constructor(){super({element:".quote-slider",elements:{quotes:".quote-slider__list",quotesSlideLeft:document.getElementById("quote_slider_left"),quotesSlideRight:document.getElementById("quote_slider_right"),quotesCountNumber:".quote-slider__active"}}),this.slides=[],this.slide=0,this.slidesCarousel()}slidesCarousel(){let e=this;this.slides=this.elements.quotes.childNodes,setInterval((function(){e.slides[e.slide].classList.remove("quote-slider__slide-active"),e.slide++,e.elements.quotesCountNumber.innerHTML=e.slide+1,e.slide>=e.slides.length&&(e.slide=0,e.elements.quotesCountNumber.innerHTML=1),e.slides[e.slide].classList.add("quote-slider__slide-active")}),5e3)}slidesMovement(e){switch(this.slides[this.slide].classList.remove("quote-slider__slide-active"),e.target.dataset.movement){case"left":0===this.slide?(this.elements.quotesCountNumber.innerHTML=this.slides.length,this.slide=this.slides.length-1,this.slides[this.slide].classList.add("quote-slider__slide-active")):(this.elements.quotesCountNumber.innerHTML=this.slide,this.slide=this.slide-1,this.slides[this.slide].classList.add("quote-slider__slide-active"));break;case"right":this.slide=this.slide+1,this.elements.quotesCountNumber.innerHTML=this.slide+1,this.slide>=this.slides.length&&(this.elements.quotesCountNumber.innerHTML=1,this.slide=0),this.slides[this.slide].classList.add("quote-slider__slide-active");break;default:return null}}addEventListeners(){this.onClickSlidesArrow=this.slidesMovement.bind(this),this.elements.quotesSlideLeft.addEventListener("click",this.onClickSlidesArrow),this.elements.quotesSlideRight.addEventListener("click",this.onClickSlidesArrow)}}},"./javascript/pages/About/index.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var s=n("./javascript/classes/Page.js");class i extends s.default{constructor(){super({id:"about",element:".about",elements:{aboutBtn:"#about_btn"}})}create(){super.create(),console.log("About Class")}}},"./javascript/pages/Home/index.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var s=n("./javascript/classes/Page.js"),i=n("./javascript/components/Quote.js");class r extends s.default{constructor(){super({id:"home",element:".home",elements:{homeBtn:"#home_btn"}}),this.createQuote()}create(){super.create()}createQuote(){this.quote=new i.default}}},"./node_modules/events/events.js":e=>{var t,n="object"==typeof Reflect?Reflect:null,s=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function r(){r.init.call(this)}e.exports=r,e.exports.once=function(e,t){return new Promise((function(n,s){function i(n){e.removeListener(t,r),s(n)}function r(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}m(e,t,r,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&m(e,"error",t,n)}(e,i,{once:!0})}))},r.EventEmitter=r,r.prototype._events=void 0,r.prototype._eventsCount=0,r.prototype._maxListeners=void 0;var o=10;function l(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function a(e){return void 0===e._maxListeners?r.defaultMaxListeners:e._maxListeners}function c(e,t,n,s){var i,r,o,c;if(l(n),void 0===(r=e._events)?(r=e._events=Object.create(null),e._eventsCount=0):(void 0!==r.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),r=e._events),o=r[t]),void 0===o)o=r[t]=n,++e._eventsCount;else if("function"==typeof o?o=r[t]=s?[n,o]:[o,n]:s?o.unshift(n):o.push(n),(i=a(e))>0&&o.length>i&&!o.warned){o.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=o.length,c=u,console&&console.warn&&console.warn(c)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,n){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=u.bind(s);return i.listener=n,s.wrapFn=i,i}function h(e,t,n){var s=e._events;if(void 0===s)return[];var i=s[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):f(i,i.length)}function v(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function f(e,t){for(var n=new Array(t),s=0;s<t;++s)n[s]=e[s];return n}function m(e,t,n,s){if("function"==typeof e.on)s.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(r){s.once&&e.removeEventListener(t,i),n(r)}))}}Object.defineProperty(r,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),r.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},r.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},r.prototype.getMaxListeners=function(){return a(this)},r.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,r=this._events;if(void 0!==r)i=i&&void 0===r.error;else if(!i)return!1;if(i){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var l=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw l.context=o,l}var a=r[e];if(void 0===a)return!1;if("function"==typeof a)s(a,this,t);else{var c=a.length,u=f(a,c);for(n=0;n<c;++n)s(u[n],this,t)}return!0},r.prototype.addListener=function(e,t){return c(this,e,t,!1)},r.prototype.on=r.prototype.addListener,r.prototype.prependListener=function(e,t){return c(this,e,t,!0)},r.prototype.once=function(e,t){return l(t),this.on(e,d(this,e,t)),this},r.prototype.prependOnceListener=function(e,t){return l(t),this.prependListener(e,d(this,e,t)),this},r.prototype.removeListener=function(e,t){var n,s,i,r,o;if(l(t),void 0===(s=this._events))return this;if(void 0===(n=s[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,r=n.length-1;r>=0;r--)if(n[r]===t||n[r].listener===t){o=n[r].listener,i=r;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(s[e]=n[0]),void 0!==s.removeListener&&this.emit("removeListener",e,o||t)}return this},r.prototype.off=r.prototype.removeListener,r.prototype.removeAllListeners=function(e){var t,n,s;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,r=Object.keys(n);for(s=0;s<r.length;++s)"removeListener"!==(i=r[s])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},r.prototype.listeners=function(e){return h(this,e,!0)},r.prototype.rawListeners=function(e){return h(this,e,!1)},r.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):v.call(e,t)},r.prototype.listenerCount=v,r.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}}},t={};function n(s){var i=t[s];if(void 0!==i)return i.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};(()=>{n.r({});var e=n("./javascript/pages/Home/index.js"),t=n("./javascript/pages/About/index.js"),s=n("./javascript/components/Navigation.js");new class{constructor(){this.createContent(),this.createPages(),this.addRouterListeners(),this.createNavigation(),window.onpopstate=()=>{const{href:e}=window.location;this.onChange(e)}}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createNavigation(){this.navigation=new s.default({template:this.template})}createPages(){this.pages={home:new e.default,about:new t.default},this.page=this.pages[this.template],this.page.create()}async onChange(e){const t=await window.fetch(e);if(200===t.status){const e=await t.text(),n=document.createElement("div");n.innerHTML=e;const s=n.querySelector(".content");this.template=s.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.content.innerHTML=s.innerHTML,this.page=this.pages[this.template],this.page.create(),this.addRouterListeners()}else{const e=new Error("Error on fetch");console.log(e)}}onNavigate(e){window.history.pushState({},e,window.location.origin+e)}addRouterListeners(){const e=document.querySelectorAll("a");Object.keys(e).forEach((t=>{const n=e[t];n.onclick=e=>{e.preventDefault();const{href:t,pathname:s}=n;this.onNavigate(s),this.onChange(t)}}))}}})(),n.r(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,